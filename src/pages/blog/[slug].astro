---
import Layout from "../../layouts/Layout.astro";
import TOC from "../../components/TOC.astro";
import LightBox from "../../components/LightBox.astro";
import { formatDate } from "../../utils/format-date";

import { Image } from "astro:assets";
import { getCollection, type CollectionEntry } from "astro:content";

export const getStaticPaths = async () => {
  const posts = await getCollection("posts");

  const paths = posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
  return paths;
};

type Props = {
  post: CollectionEntry<"posts">;
};

const { post } = Astro.props;
post.data.date = formatDate(post.data.date);

const { headings, Content } = await post.render();
---
<!-- LaTeX styles: https://blog.alexafazio.dev/blog/render-latex-in-astro/ -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/katex.css" integrity="sha384-WsHMgfkABRyG494OmuiNmkAOk8nhO1qE+Y6wns6v+EoNoTNxrWxYpl5ZYWFOLPCM" crossorigin="anonymous">

<LightBox />

<Layout title={`AIdventure - ${post.data.title}`}>
    <div class="mb-0 lg:mb-24">
        <div class="px-6 lg:w-10/12 xl:px-12 w-full flex flex-col xl:w-6/12 mx-auto">
            <h1 class="text-4xl xl:text-5xl font-bold xl:tracking-tight mt-1 xl:leading-tight xl:col-span-8 xl:col-start-2">
                {post.data.title}
            </h1>
            <Image
                src={post.data.image}
                alt={post.data.title}
                width={800}
                height={450}
                format="webp"
                class="w-full rounded-2xl shadow-xl mt-6 object-cover col-span-8 col-start-2"
            />
            <div class="flex flex-row flex-wrap gap-1 pb-3 text-sm text-gray-500 mt-6 mb-4 xl:mb-8 col-span-8 col-start-2">
                <span>{post.data.author}</span>
                <span aria-hidden="true">·</span>
                <time datetime={post.data.date}>{post.data.date}</time>
                <span aria-hidden="true">·</span>
                {post.data.tags.map((tag) => <span>#{tag}</span>)}
            </div>
        </div>
        
        <div class="w-full xl:w-10/12 mx-auto">
            <div class="grid grid-cols-12 xl:grid-cols-10">
                <main class="px-6 xl:px-12 order-2 lg:order-1 col-span-12 lg:col-span-8 lg:col-start-2 xl:col-span-6 xl:col-start-3">
                    <div class=`
                        prose max-w-none
                        prose-h2:text-4xl prose-h3:text-3xl prose-h4:text-2xl
                        prose-a:text-lila-900
                    `>
                        <Content />
                    </div>
                </main>
                <div class="order-1 hidden lg:block lg:order-2 col-span-12 px-6 xl:px-8 mb-8 xl:mb-0 lg:col-span-2">
                    <div class="lg:sticky lg:top-20 lg:ms-8 w-full">
                        <h2 class="font-semibold text-2xl lg:text-base">Table of Contents</h2>
                        <TOC headings={headings} />
                    </div>
                </div>
            </div>
        </div>
        <!-- Display a sticky collapsible TOC positioned bottom -->
        <div class=`
            sticky w-full lg:hidden
            bottom-0 
            mt-8 py-6
            bg-green-500
            border-t-2 border-black
        ` id="mobile-toc">
            <div class="w-full text-center font-bold" id="mobile-toc-opener">
                <h2 class="font-semibold text-xl lg:text-base">Table of Contents</h2>
            </div>
            <div class="w-fit text-left m-auto font-bold hidden" id="mobile-toc-content">
                <TOC headings={headings} />
            </div>
        </div>
    </div>
    
</Layout>




<script>
    const copy_code = () => {
        // Add a class 'relative' to all pre elements
        let codeBlocks = Array.from(document.querySelectorAll('pre'))
        codeBlocks.forEach((code) => {
            code.classList.add('relative')
        })

        let copyButtonContent = `
        <svg class="h-5 w-5 stroke-gray-300 hover:stroke-white" viewBox="0 0 24 24" stroke-width="1.5" fill="none" stroke-linecap="round" stroke-linejoin="round">
            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
            <path d="M8 8m0 2a2 2 0 0 1 2 -2h8a2 2 0 0 1 2 2v8a2 2 0 0 1 -2 2h-8a2 2 0 0 1 -2 -2z" />
            <path d="M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2" />
        </svg>    
        `
        let codeBlock = Array.from(document.querySelectorAll('pre > code'))

        codeBlock.forEach((code) => {
            const button = document.createElement('button')
            button.classList.add(
                'absolute',
                'top-2',
                'right-2',
                'p-2',
                'rounded-md',
                'transition-all',
                'duration-200',
                'flex',
                'items-center',
                'justify-center'
            )
            //add to the button a svg icon
            button.innerHTML = copyButtonContent
            code.parentElement?.appendChild(button)

            button.addEventListener('click', () => {
                if (code.textContent !== null) {
                    navigator.clipboard.writeText(code.textContent);
                }
                button.innerHTML = `
                <svg class="h-5 w-5 stroke-green-400" viewBox="0 0 24 24" stroke-width="1.5" fill="none" stroke-linecap="round" stroke-linejoin="round">
                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                    <path d="M5 12l5 5l10 -10" />
                </svg>
                `
                setTimeout(() => {
                    button.innerHTML = copyButtonContent
                }, 2000)
            })
        })
    }

    document.addEventListener("DOMContentLoaded", copy_code);
    document.addEventListener("astro:after-swap", copy_code);
</script>

<script>
    // Logic for the mobile TOC collapsible
    const toc = document.getElementById('mobile-toc')
    const tocOpener = document.getElementById('mobile-toc-opener')
    const tocContent = document.getElementById('mobile-toc-content')

    // close the TOC if the user selects a heading
    const tocLinks = Array.from(document.querySelectorAll('#mobile-toc-content a'))
    tocLinks.forEach((link) => {
        link.addEventListener('click', () => {
            tocContent?.classList.add('hidden')
        })
    })

    tocOpener?.addEventListener('click', () => {
        tocContent?.classList.toggle('hidden')
    })

    document.addEventListener('click', function (event) {
        if (!toc?.contains(event.target as Node)) {
            tocContent?.classList.add('hidden')
        }
    })

</script>
