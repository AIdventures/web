---
import Layout from "../../layouts/Layout.astro";
import TOC from "../../components/TOC.astro";
import { formatDate } from "../../utils/format-date";

import { Image } from "astro:assets";
import { getCollection, type CollectionEntry } from "astro:content";

export const getStaticPaths = async () => {
  const posts = await getCollection("posts");

  const paths = posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
  return paths;
};

type Props = {
  post: CollectionEntry<"posts">;
};

const { post } = Astro.props;
post.data.date = formatDate(post.data.date);

const { headings, Content } = await post.render();
---

<Layout title={`AIdventure - ${post.data.title}`}>
    <div class="px-6 xl:px-12 w-full flex flex-col xl:w-6/12 mx-auto">
        <h1 class="text-4xl xl:text-5xl font-bold xl:tracking-tight mt-1 xl:leading-tight xl:col-span-8 xl:col-start-2">
            {post.data.title}
        </h1>
        <Image
            src={post.data.image}
            alt={post.data.title}
            width={1024}
            height={1024 / 2}
            format="webp"
            class="w-full rounded-2xl shadow-xl mt-6 object-cover col-span-8 col-start-2"
        />
        <div class="flex flex-row flex-wrap gap-1 pb-3 text-sm text-gray-500 mt-6 mb-4 xl:mb-8 col-span-8 col-start-2">
            <span>{post.data.author}</span>
            <span aria-hidden="true">·</span>
            <time datetime={post.data.date}>{post.data.date}</time>
            <span aria-hidden="true">·</span>
            {post.data.tags.map((tag) => <span>#{tag}</span>)}
        </div>
    </div>
    
    <div class="w-full xl:w-10/12 mx-auto">
        <div class="grid grid-cols-12 xl:grid-cols-10">
            <main class="px-6 xl:px-12 order-2 lg:order-1 col-span-12 lg:col-span-8 lg:col-start-2 xl:col-span-6 xl:col-start-3">
                <div class="prose max-w-none">
                    <Content />
                </div>
            </main>
            <div class="order-1 lg:order-2 col-span-12 px-6 xl:px-8 mb-8 xl:mb-0 lg:col-span-2">
                <div class="lg:sticky lg:top-20 lg:ms-8 w-full">
                    <TOC headings={headings} />
                </div>
            </div>
        </div>
    </div>
</Layout>


<script>
    // Add a class 'relative' to all pre elements
    let codeBlocks = Array.from(document.querySelectorAll('pre'))
    codeBlocks.forEach((code) => {
        code.classList.add('relative')
    })

	let copyButtonContent = `
    <svg class="h-5 w-5 stroke-gray-300 hover:stroke-white" viewBox="0 0 24 24" stroke-width="1.5" fill="none" stroke-linecap="round" stroke-linejoin="round">
        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
        <path d="M8 8m0 2a2 2 0 0 1 2 -2h8a2 2 0 0 1 2 2v8a2 2 0 0 1 -2 2h-8a2 2 0 0 1 -2 -2z" />
        <path d="M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2" />
    </svg>    
    `
	let codeBlock = Array.from(document.querySelectorAll('pre > code'))

	codeBlock.forEach((code) => {
		const button = document.createElement('button')
		button.classList.add(
			'absolute',
			'top-2',
			'right-2',
			'p-2',
			'rounded-md',
			'transition-all',
			'duration-200',
			'flex',
			'items-center',
			'justify-center'
		)
		//add to the button a svg icon
        button.innerHTML = copyButtonContent
		code.parentElement?.appendChild(button)

		button.addEventListener('click', () => {
            if (code.textContent !== null) {
                navigator.clipboard.writeText(code.textContent);
            }
			button.innerHTML = `
            <svg class="h-5 w-5 stroke-green-400" viewBox="0 0 24 24" stroke-width="1.5" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                <path d="M5 12l5 5l10 -10" />
            </svg>
            `
			setTimeout(() => {
				button.innerHTML = copyButtonContent
			}, 2000)
		})
	})
</script>