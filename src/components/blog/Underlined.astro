---
type Props = {
  color?: "yellow" | "green" | "blue" | "purple" | "red" | "brown";
};

//  Default color #f3c0ea
const { color = "yellow" }: Props = Astro.props;

const colors = {
  yellow: "rgba(255, 247, 152, 0.6)",
  green: "rgba(167, 242, 164, 0.5)",
  red: "rgba(242, 172, 172, 0.4)",
  purple: "rgba(175, 149, 202, 0.4)",
  blue: "rgba(162, 202, 242, 0.6)",
  brown: "rgba(242, 202, 172, 0.5)",
};

const colorHex = colors[color]
---

<span class="marker-underlined">
  <slot />
</span>

<style define:vars={{ colorHex }}>
  .marker-underlined {
    /* The intrinsic width of the underline stroke (in pixels). This is 
   * the same as the height of the cap images. Don't specify the
   * units! This is because of some of the calculations we do later on. */
   --underline-intrinsic-width: 8;

    /* The actual width of the underline stroke we want to render (in pixels).
    * You can modify this, and the sizing and positioning should be calculated
    * accordingly. Again, Don't specify the units! */
    --underline-width: 9;

    /* The colour used to draw the underline. It should match the colour
    * used in the cap images... unfortunately we can't modify the SVG
    * fill via CSS because it's a background image. */
    --underline-color: var(--colorHex);

    /* We need to know the width of the cap images so that we
    * can position everything on the x axis accordingly. */
    --underline-cap-width: 4px;

    /* The border is positioned relative to the bottom of the line.
    * We can move it upwards a little to create an overlap effect. */
    --underline-offset-y: -1px;

    /* The padding to add to the x axis. By default, the caps would be
    * aligned with the beginning and end of the line. */
    --underline-padding-x: 0.12em;

    display: inline;
    --underline-width-scale: calc(
      var(--underline-width) / var(--underline-intrinsic-width)
    );
    /*
    padding: 0
      calc(
        var(--underline-padding-x) +
          calc(var(--underline-cap-width) * var(--underline-width-scale))
    );
    */
    box-decoration-break: clone;
    background-repeat: no-repeat;
    background-image: linear-gradient(
      180deg,
      var(--underline-color),
      var(--underline-color)
    );
    background-position-x: calc(
        var(--underline-cap-width) * var(--underline-width-scale)
      ),
      0, 100%;
    background-position-y: calc(100% - var(--underline-offset-y) * 1);
    background-size:
      calc(
          100% -
            calc(var(--underline-cap-width) * var(--underline-width-scale) * 2)
        )
        calc(var(--underline-width) * 1px),
      auto calc(var(--underline-width) * 1px),
      auto calc(var(--underline-width) * 1px);
  }
</style>
